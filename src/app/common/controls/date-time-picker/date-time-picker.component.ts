import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { FormBuilder, FormGroup, FormControl } from '@angular/forms';
import * as moment from 'moment';

import { GenericReactiveForm } from 'app/common/util/generic-reactive-form';


@Component({
  selector: 'my-date-time-picker',
  templateUrl: './date-time-picker.component.html',
  styleUrls: ['./date-time-picker.component.less']
})
export class DateTimePickerComponent implements OnInit {

  @Input()
  labelDate: string = "Date";
  @Input()
  labelTime: string = "Time";
  
  @Input()
  date:Date;
  @Output()
  dateChange = new EventEmitter<Date>();
  
  readonly ddlDayTimes = DdlOptions_TimesOfDay;

  private dateTimePickerFormFMG: GenericReactiveForm<DateTimePickerRFM>;
  dateTimePickerForm: FormGroup;
  fcDate: FormControl;
  fcTime: FormControl;

  constructor(
    private formBuilder: FormBuilder,
  ) { }

  ngOnInit() {
    this.dateTimePickerFormFMG = new GenericReactiveForm<DateTimePickerRFM>(this.formBuilder, {
      date: this.fcDate = new FormControl(''),
      time: this.fcTime = new FormControl(''),
    });
    this.dateTimePickerForm = this.dateTimePickerFormFMG.formGroup;
    this.dateTimePickerForm.valueChanges.subscribe(change => this.formInputsChanged())
  }

  formInputsChanged() {
    let dateTimeRFM = this.dateTimePickerFormFMG.getValue();
    let momentStruct = moment(dateTimeRFM.date).add(dateTimeRFM.time);
    console.log(momentStruct.format());
    this.date = momentStruct.toDate();
    this.dateChange.emit(this.date);
  }
}



class DateTimePickerRFM {
  date: string;
  time: moment.Duration;
}

const DdlOptions_TimesOfDay: moment.Duration[] = [
  // NOTE: generated by G:\My Drive\workshit2-share-miktemk\code-snippets-templates\genoutput.py
  moment.duration({ hours: 0, minutes: 0  }),
  moment.duration({ hours: 0, minutes: 30 }),
  moment.duration({ hours: 1, minutes: 0  }),
  moment.duration({ hours: 1, minutes: 30 }),
  moment.duration({ hours: 2, minutes: 0  }),
  moment.duration({ hours: 2, minutes: 30 }),
  moment.duration({ hours: 3, minutes: 0  }),
  moment.duration({ hours: 3, minutes: 30 }),
  moment.duration({ hours: 4, minutes: 0  }),
  moment.duration({ hours: 4, minutes: 30 }),
  moment.duration({ hours: 5, minutes: 0  }),
  moment.duration({ hours: 5, minutes: 30 }),
  moment.duration({ hours: 6, minutes: 0  }),
  moment.duration({ hours: 6, minutes: 30 }),
  moment.duration({ hours: 7, minutes: 0  }),
  moment.duration({ hours: 7, minutes: 30 }),
  moment.duration({ hours: 8, minutes: 0  }),
  moment.duration({ hours: 8, minutes: 30 }),
  moment.duration({ hours: 9, minutes: 0  }),
  moment.duration({ hours: 9, minutes: 30 }),
  moment.duration({ hours: 10, minutes: 0  }),
  moment.duration({ hours: 10, minutes: 30 }),
  moment.duration({ hours: 11, minutes: 0  }),
  moment.duration({ hours: 11, minutes: 30 }),
  moment.duration({ hours: 12, minutes: 0  }),
  moment.duration({ hours: 12, minutes: 30 }),
  moment.duration({ hours: 13, minutes: 0  }),
  moment.duration({ hours: 13, minutes: 30 }),
  moment.duration({ hours: 14, minutes: 0  }),
  moment.duration({ hours: 14, minutes: 30 }),
  moment.duration({ hours: 15, minutes: 0  }),
  moment.duration({ hours: 15, minutes: 30 }),
  moment.duration({ hours: 16, minutes: 0  }),
  moment.duration({ hours: 16, minutes: 30 }),
  moment.duration({ hours: 17, minutes: 0  }),
  moment.duration({ hours: 17, minutes: 30 }),
  moment.duration({ hours: 18, minutes: 0  }),
  moment.duration({ hours: 18, minutes: 30 }),
  moment.duration({ hours: 19, minutes: 0  }),
  moment.duration({ hours: 19, minutes: 30 }),
  moment.duration({ hours: 20, minutes: 0  }),
  moment.duration({ hours: 20, minutes: 30 }),
  moment.duration({ hours: 21, minutes: 0  }),
  moment.duration({ hours: 21, minutes: 30 }),
  moment.duration({ hours: 22, minutes: 0  }),
  moment.duration({ hours: 22, minutes: 30 }),
  moment.duration({ hours: 23, minutes: 0  }),
  moment.duration({ hours: 23, minutes: 30 }),
];